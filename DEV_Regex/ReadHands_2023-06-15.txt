        public static List<Hand> ReadHands(string hh)
        {
            List<Hand> hands = new List<Hand>();

            //https://regex101.com/r/5ATdi6/1


            //^(?<Room>.+) Hand #(?<HandId>\d+): Tournament #(?<TournamentId>\d+), (?<Currency>[$€])(?<BuyIn>[\.\d]+)(?:\+[$€](?<Fee>[\.\d]+))*.+(?<Level>\d+/\d+)\) - (?<Date>[\d/]+) (?<Time>[\d:]+) ET[\s\r\n]+^Table '(?<TableId>[\s\d]+)' (?<Type>.+) Seat #(?<SeatBtn>\d+) is the button(?:[\s\r\n]+^Seat (?<Seat_Num>\d+): (?<Seat_Player>.+) \((?:(?<Seat_Stack>[\d\.]+) in chips)(?:, [$€](?<Seat_Bounty>[\d\.]+) bounty)?\))*(?:[\s\r\n]+^(?<PreHCsAction_Player>.+): posts(?<PreHCsAction_Post> the ante | small blind | big blind )(?<PreHCsAction_Chips>\d+)(?: and is all-in)?)*[\s\r\n]+^\*\*\* HOLE CARDS \*\*\*[\s\r\n]+(?:^Dealt to (?<Hero>.+) \[(?<HC1>[a-zA-Z2-9]+) (?<HC2>[a-zA-Z2-9]+)\])?(?:[\s\r\n]+^(?<PreFlopAction_Player>.+): (?<PreFlopAction_Action>raises|bets|folds|calls|checks|uBet) (?<PreFlopAction_Size>-?\d+) (?<PreFlopAction_AI>1|0))*(?:[\s\r\n]+^(?<PlayerCollect>.+) collected (?<AmountCollect>\d+) from (?<CollectFrom>(?:side pot|main pot|pot)?))*(?:[\s\r\n]+^\*\*\* FLOP \*\*\* (?:\[(?<FC1>[a-zA-Z2-9]+) (?<FC2>[a-zA-Z2-9]+) (?<FC3>[a-zA-Z2-9]+)\]))?(?:[\s\r\n]+^(?<FlopAction_Player>.+): (?<FlopAction_Action>raises|bets|folds|calls|checks|uBet) (?<FlopAction_Size>-?\d+) (?<FlopAction_AI>1|0))*(?:[\s\r\n]+^(?<PlayerCollect>.+) collected (?<AmountCollect>\d+) from (?<CollectFrom>(?:side pot|main pot|pot)?))*(?:[\s\r\n]+^\*\*\* TURN \*\*\* (?:.+\[(?<TC>[a-zA-Z2-9]+)\]))?(?:[\s\r\n]+^(?<TurnAction_Player>.+): (?<TurnAction_Action>raises|bets|folds|calls|checks|uBet) (?<TurnAction_Size>-?\d+) (?<TurnAction_AI>1|0))*(?:[\s\r\n]+^(?<PlayerCollect>.+) collected (?<AmountCollect>\d+) from (?<CollectFrom>(?:side pot|main pot|pot)?))*(?:[\s\r\n]+^\*\*\* RIVER \*\*\* (?:.+\[(?<RC>[a-zA-Z2-9]+)\]))?(?:[\s\r\n]+^(?<RiverAction_Player>.+): (?<RiverAction_Action>raises|bets|folds|calls|checks|uBet) (?<RiverAction_Size>-?\d+) (?<RiverAction_AI>1|0))*(?:[\s\r\n]+^(?<PlayerCollect>.+) collected (?<AmountCollect>\d+) from (?<CollectFrom>(?:side pot|main pot|pot)?))*(?:[\s\r\n]+^\*\*\* SHOW DOWN \*\*\*)?(?:[\s\r\n]+^(?<ShowDown_Player>.+): shows \[(?<ShowDown_HC1>[a-zA-Z2-9]+) (?<ShowDown_HC2>[a-zA-Z2-9]+)\] .+)*(?:[\s\r\n]+^(?<PlayerCollect>.+) collected (?<AmountCollect>\d+) from (?<CollectFrom>(?:side pot|main pot|pot)?))*(?:[\s\r\n]+^(?<ShowDown_PlayerFinished>.+) finished the tournament in (?<ShowDown_AtPlace>.+)(?:nd|rd|th) place(?: and received [$€](?<Prize>[\.\d]+).)?)*(?:[\s\r\n]+^(?<ShowDown_PlayerWon>.+) wins the tournament and receives [$€](?<PrizeWinner>[\.\d]+) - congratulations!)*(?:[\s\r\n]+^\*\*\* SUMMARY \*\*\*)?(?:[\s\r\n]+^Total pot (?<TotalPot>\d+)(?: Main pot (?<SidePot>\d+)\.)?(?: Side pot(?:[-\d]+)? (?<SidePot>\d+)\.)* \| Rake (?<Rake>\d+))?(?:[\s\r\n]+^Board .+)?(?:[\s\r\n]+^.+: (?<Summary_Player>.+) (?:/(button|small blind|big blind/) )?(?:showed|mucked)( (\[(?<Summary_HC1>[a-zA-Z2-9]+) (?<Summary_HC2>[a-zA-Z2-9]+)\](?:.+)?))?)*


            Console.WriteLine("start");
            Stopwatch watch = new();
            watch.Start();

            string pattern = @"^(?<Room>.+) Hand #(?<HandId>\d+): Tournament #(?<TournamentId>\d+), (?<Currency>[$€])(?<BuyIn>[\.\d]+)(?:\+[$€](?<Fee>[\.\d]+))*.+(?<Level>\d+/\d+)\) - (?<Date>[\d/]+) (?<Time>[\d:]+) (.+)" +
            @"[\s\r\n]+^Table '(?<TableId>[\s\d]+)' (?<Type>.+) Seat #(?<SeatBtn>\d+) is the button" +
            @"(?:[\s\r\n]+^Seat (?<Seat_Num>\d+): (?<Seat_Player>.+) \((?:(?<Seat_Stack>[\d\.]+) in chips)(?:, [$€](?<Seat_Bounty>[\d\.]+) bounty)?\))*" +
            @"(?:[\s\r\n]+^(?<PreHCsAction_Player>.+): posts(?<PreHCsAction_Post> the ante | small blind | big blind )(?<PreHCsAction_Chips>\d+)(?: and is all-in)?)*" +
            @"[\s\r\n]+^\*\*\* HOLE CARDS \*\*\*[\s\r\n]+" +
            //PRE FLOP
            @"(?:^Dealt to (?<Hero>.+) \[(?<HC1>[a-zA-Z2-9]+) (?<HC2>[a-zA-Z2-9]+)\](?:.+))?" +
            @"(?:[\s\r\n]+^(?<PreFlopAction_Player>.+): (?<PreFlopAction_Action>raises|bets|folds|calls|checks|uBet) (?<PreFlopAction_Size>-?\d+) (?<PreFlopAction_AI>1|0))*" +
            // FLOP
            @"(?:[\s\r\n]+^\*\*\* FLOP \*\*\* (?:\[(?<FC1>[a-zA-Z2-9]+) (?<FC2>[a-zA-Z2-9]+) (?<FC3>[a-zA-Z2-9]+)\]))?" +
            @"(?:[\s\r\n]+^(?<FlopAction_Player>.+): (?<FlopAction_Action>raises|bets|folds|calls|checks|uBet) (?<FlopAction_Size>-?\d+) (?<FlopAction_AI>1|0))*" +
            // TURN
            @"(?:[\s\r\n]+^\*\*\* TURN \*\*\* (?:.+\[(?<TC>[a-zA-Z2-9]+)\]))?" +
            @"(?:[\s\r\n]+^(?<TurnAction_Player>.+): (?<TurnAction_Action>raises|bets|folds|calls|checks|uBet) (?<TurnAction_Size>-?\d+) (?<TurnAction_AI>1|0))*" +
            // RIVER
            @"(?:[\s\r\n]+^\*\*\* RIVER \*\*\* (?:.+\[(?<RC>[a-zA-Z2-9]+)\]))?" +
            @"(?:[\s\r\n]+^(?<RiverAction_Player>.+): (?<RiverAction_Action>raises|bets|folds|calls|checks|uBet) (?<RiverAction_Size>-?\d+) (?<RiverAction_AI>1|0))*" +
            // SHOW DOWN
            @"(?:[\s\r\n]+^\*\*\* SHOW DOWN \*\*\*)?" +
            @"(?:[\s\r\n]+^(?<ShowDown_Player>.+): shows \[(?<ShowDown_HC1>[a-zA-Z2-9]+) (?<ShowDown_HC2>[a-zA-Z2-9]+)\] .+)*" +
            @"(?:[\s\r\n]+^(?<ShowDown_PlayerFinished>.+) finished the tournament in (?<ShowDown_AtPlace>.+)(?:nd|rd|th) place(?: and received [$€](?<Prize>[\.\d]+).)?)*" +
            @"(?:[\s\r\n]+^(?<ShowDown_PlayerWon>.+) wins the tournament and receives [$€](?<PrizeWinner>[\.\d]+) - congratulations!)*" +
            // SUMMARY
            @"(?:[\s\r\n]+^\*\*\* SUMMARY \*\*\*)?" +
            @"(?:[\s\r\n]+^Total pot (?<TotalPot>\d+)(?: Main pot (?<SidePot>\d+)\.)?(?: Side pot(?:[-\d]+)? (?<SidePot>\d+)\.)* \| Rake (?<Rake>\d+))?" +
            @"(?:[\s\r\n]+^Board .+)?" +
            @"(?:[\s\r\n]+^(?<Summary_Player>(.+)): \[(?<Summary_HC1>[a-zA-Z2-9]+) (?<Summary_HC2>[a-zA-Z2-9]+)\] (?<Summary_AmountCollected>-?\d+))*";


            string cleanHH = hh.CleanHandHistory();


            MatchCollection matches = Regex.Matches(cleanHH, pattern, RegexOptions.Multiline);

            


            Console.WriteLine("Clean HH Readed: " + watch.ElapsedMilliseconds / 1000 + "s");
            Console.WriteLine("Hands Readed: " + matches.Count());

            watch.Restart();

            List<Hand> allHands = new List<Hand>();

            foreach (Match match in matches)
            {
                string currPlayer;
                string currAction;
                string currSize;
                string currAI;

                string contributionType;

                bool openOpp = true;
                

                float pfPot = match.Groups["PreHCsAction_Chips"].Captures.Sum(capture => float.Parse(capture.Value));

                float amtBefore = pfPot;

                List<float> sidePots = new();
                for (int i = 0; i < match.Groups["SidePot"].Captures.Count; i++)
                {
                    sidePots.Add(match.Groups["SidePot"].Captures[i].Value != "" ? float.Parse(match.Groups["SidePot"].Captures[i].Value) : 0);
                }

                List<(string, HoleCards)> sawShowdown_Players = new();
                for (int i = 0; i < match.Groups["ShowDown_Player"].Captures.Count; i++)
                {
                    sawShowdown_Players.Add((match.Groups["ShowDown_Player"].Captures[i].Value, new HoleCards { HC1 = new Card { Id = match.Groups["ShowDown_HC1"].Captures[i].Value.ConvertCardstringToUint(), Name = match.Groups["ShowDown_HC1"].Captures[i].Value }, HC2 = new Card { Id = match.Groups["ShowDown_HC2"].Captures[i].Value.ConvertCardstringToUint(), Name = match.Groups["ShowDown_HC2"].Captures[i].Value } }));
                }

                List<string> players = new();
                for (int i = 0; i < match.Groups["Seat_Player"].Captures.Count; i++)
                {
                    players.Add(match.Groups["Seat_Player"].Captures[i].Value);
                }


                HandInfo handInfo = new()
                {
                    Room = match.Groups["Room"].Value,
                    HandIdBySite = long.Parse(match.Groups["HandId"].Value),
                    TournamentIdBySite = long.Parse(match.Groups["TournamentId"].Value),
                    Currency = match.Groups["Currency"].Value,
                    BuyIn = double.Parse(match.Groups["BuyIn"].Value),
                    Fee = double.Parse(match.Groups["Fee"].Value),
                    Level = match.Groups["Level"].Value,
                    Date = DateTime.Parse(match.Groups["Date"].Value),
                    Time = TimeSpan.Parse(match.Groups["Time"].Value),
                    TableIdBySite = match.Groups["TableId"].Value,
                    TournamentType = match.Groups["Type"].Value,
                    SeatBtn = sbyte.Parse(match.Groups["SeatBtn"].Value),
                    Hero = match.Groups["Hero"].Value,
                    FullHandAsString = match.Groups["0"].Value,
                    CntPlayers = Convert.ToUInt16(match.Groups["Seat_Player"].Captures.Count()),
                    CntPlayers_Flop = Convert.ToUInt16(match.Groups["FlopAction_Player"].Captures.Count()),
                    CntPlayers_Turn = Convert.ToUInt16(match.Groups["TurnAction_Player"].Captures.Count()),
                    CntPlayers_River = Convert.ToUInt16(match.Groups["RiverAction_Player"].Captures.Count()),
                    CntPlayers_Showdown = Convert.ToUInt16(match.Groups["ShowDown_Player"].Captures.Count()),
                    PfPot = pfPot,
                    HC1 = new Card{ Id = match.Groups["HC1"].Value.ConvertCardstringToUint() , Name = match.Groups["HC1"].Value },
                    HC2 = new Card { Id = match.Groups["HC2"].Value.ConvertCardstringToUint(), Name = match.Groups["HC2"].Value },
                    FC1 = new Card { Id = match.Groups["FC1"].Value.ConvertCardstringToUint(), Name = match.Groups["FC1"].Value },
                    FC2 = new Card { Id = match.Groups["FC2"].Value.ConvertCardstringToUint(), Name = match.Groups["FC2"].Value },
                    FC3 = new Card { Id = match.Groups["FC3"].Value.ConvertCardstringToUint(), Name = match.Groups["FC3"].Value },
                    TC = new Card { Id = match.Groups["TC"].Value.ConvertCardstringToUint(), Name = match.Groups["TC"].Value },
                    RC = new Card { Id = match.Groups["RC"].Value.ConvertCardstringToUint(), Name = match.Groups["RC"].Value },
                    TotalPot = (match.Groups["TotalPot"].Value != "" ? float.Parse(match.Groups["TotalPot"].Value) : 0),
                    SidePots = sidePots,
                    SawShowdown_Players = sawShowdown_Players,
                    Players = players

                };

                if (match.Groups["HandId"].Value == "224020742964")
                {
                    int ff = 1;
                }
                
                Dictionary<string, SeatAction> actionDict = new();


                for (int i = 0; i < match.Groups["Seat_Player"].Captures.Count; i++)
                {
                    SeatAction currSeatAction = new SeatAction ();
                    currSeatAction.SeatNumber = sbyte.Parse(match.Groups["Seat_Num"].Captures[i].ToString());
                    currSeatAction.StartingStack = float.Parse(match.Groups["Seat_Stack"].Captures[i].ToString());
                    actionDict.Add(match.Groups["Seat_Player"].Captures[i].ToString(), currSeatAction);
                }


                //@"(?:[\s\r\n]+^(?<PreHCsAction_Player>.+): posts(?<PreHCsAction_Post> the ante | small blind | big blind )(?<PreHCsAction_Chips>\d+)+)*" 
                for (int i = 0; i < match.Groups["PreHCsAction_Player"].Captures.Count; i++)
                {
                    currPlayer = match.Groups["PreHCsAction_Player"].Captures[i].ToString();
                    contributionType = match.Groups["PreHCsAction_Post"].Captures[i].ToString();
                    if (contributionType == " the ante ")
                    {
                        actionDict[currPlayer].Ante = float.Parse(match.Groups["PreHCsAction_Chips"].Captures[i].ToString());
                        //actionDict[currPlayer].ChipsInvested += float.Parse(match.Groups["PreHCsAction_Chips"].Captures[i].ToString());
                        


                    }
                    else if (contributionType == " small blind ")
                    {
                        actionDict[currPlayer].Blind = float.Parse(match.Groups["PreHCsAction_Chips"].Captures[i].ToString());
                        actionDict[currPlayer].SeatPosition = 8;

                        //actionDict[currPlayer].ChipsInvested += float.Parse(match.Groups["PreHCsAction_Chips"].Captures[i].ToString());
                    }
                    else if (contributionType == " big blind ")
                    {
                        actionDict[currPlayer].Blind = float.Parse(match.Groups["PreHCsAction_Chips"].Captures[i].ToString());
                        actionDict[currPlayer].SeatPosition = 9;
                        handInfo.Amt_bb = float.Parse(match.Groups["PreHCsAction_Chips"].Captures[i].ToString());

                        //actionDict[currPlayer].ChipsInvested += float.Parse(match.Groups["PreHCsAction_Chips"].Captures[i].ToString());
                    }

                    //if (actionDict[currPlayer].ChipsInvested == actionDict[currPlayer].StartingStack)
                    //{
                    //    handInfo.StreetAI = "PF";
                    //    actionDict[currPlayer].StreetAI = "PF";
                    //}
                }


                ////PRE FLOP
                //@"(?:^Dealt to (?<Hero>.+) \[(?<HC1>[a-zA-Z2-9]+) (?<HC2>[a-zA-Z2-9]+)\])?" +
                //@"(?:[\s\r\n]+^(?<PreFlopAction_Player>.+): (?<PreFlopAction_Action>raises|bets|folds|calls|checks|uBet) (?<PreFlopAction_Size>-?\d+) (?<PreFlopAction_AI>ai|nai))*" +
                //@"(?:[\s\r\n]+^(?<PreFlopAction_PlayerCollect>.+) collected (?<PreFlopAction_AmountCollect>\d+) from (?<PreFlopAction_CollectFrom>(?:side pot|main pot|pot)?))*" +





                for (int i = 0; i < match.Groups["PreFlopAction_Player"].Captures.Count; i++)
                {

                    currPlayer = match.Groups["PreFlopAction_Player"].Captures[i].ToString();
                    currAction = match.Groups["PreFlopAction_Action"].Captures[i].ToString();
                    currSize = match.Groups["PreFlopAction_Size"].Captures[i].ToString();
                    currAI = match.Groups["PreFlopAction_AI"].Captures[i].ToString();

                    if (actionDict[currPlayer].SeatPosition == 0 && i < handInfo.CntPlayers - 3)
                    {
                            actionDict[currPlayer].SeatPosition = Convert.ToUInt16(handInfo.CntPlayers - i - 3); //As the first layer to act pF is always the firthes one, his pos = cntPlayers - 3(btn=0, SB=8 and BB=9 are fixed POS); -- For every next pos until we reach the SB;  
                    }

                    actionDict[currPlayer].pf_open_opp = openOpp;

                    if (currAction != "folds")
                    {
                        openOpp = false;
                    }
                    
                    //actionDict[currPlayer].ChipsInvested += float.Parse(currSize);
                    actionDict[currPlayer].Actions.PreFlop.Add(new Models.Action() { Act = currAction, Size = float.Parse(currSize), AI = sbyte.Parse(currAI) });


                    //amtBefore += float.Parse(currSize);
                    //if (currAction == "raises" && i <actionDict.Count)
                    //{
                    //    amtBefore -= actionDict[currPlayer].Blind;
                    //    actionDict[currPlayer].ChipsInvested -= actionDict[currPlayer].Blind;
                    //}
                    

                    if (currAI == "1")
                    {
                        actionDict[currPlayer].StreetAI = "PF";
                        //handInfo.StreetAI = "PF";
                        actionDict[currPlayer].saw_flop = true;
                        actionDict[currPlayer].saw_turn = true;
                        actionDict[currPlayer].saw_river = true;
                        actionDict[currPlayer].saw_showdown = true;
                    }

                    //if (i == match.Groups["PreFlopAction_Player"].Captures.Count - 1)
                    //{
                    //    handInfo.FlopPot = amtBefore;
                    //}

                    

                }

                for (int i = 0; i < match.Groups["FlopAction_Player"].Captures.Count; i++)
                {
                    currPlayer = match.Groups["FlopAction_Player"].Captures[i].ToString();
                    currAction = match.Groups["FlopAction_Action"].Captures[i].ToString();
                    currSize = match.Groups["FlopAction_Size"].Captures[i].ToString();
                    currAI = match.Groups["FlopAction_AI"].Captures[i].ToString();

                    actionDict[currPlayer].saw_flop = true;

                    //actionDict[currPlayer].ChipsInvested += float.Parse(currSize);
                    actionDict[currPlayer].Actions.Flop.Add(new Models.Action() { Act = currAction, Size = float.Parse(currSize), AI = sbyte.Parse(currAI) });
                    amtBefore += float.Parse(currSize);

                    if (currAI == "1")
                    {
                        actionDict[currPlayer].StreetAI = "F";
                        //handInfo.StreetAI = "F";
                        actionDict[currPlayer].saw_turn = true;
                        actionDict[currPlayer].saw_river = true;
                        actionDict[currPlayer].saw_showdown = true;
                    }

                    //if (i == match.Groups["FlopAction_Player"].Captures.Count - 1)
                    //{
                    //    handInfo.TurnPot = amtBefore;
                    //}

                    //if (match.Groups["FlopAction_Player"].Captures.Count >0 && handInfo.StreetAI !=null)
                    //{
                    //    handInfo.StreetAI = "F";
                    //}
                }

                for (int i = 0; i < match.Groups["TurnAction_Player"].Captures.Count; i++)
                {
                    currPlayer = match.Groups["TurnAction_Player"].Captures[i].ToString();
                    currAction = match.Groups["TurnAction_Action"].Captures[i].ToString();
                    currSize = match.Groups["TurnAction_Size"].Captures[i].ToString();
                    currAI = match.Groups["TurnAction_AI"].Captures[i].ToString();

                    actionDict[currPlayer].saw_turn = true;

                    //actionDict[currPlayer].ChipsInvested += float.Parse(currSize);
                    actionDict[currPlayer].Actions.Turn.Add(new Models.Action() { Act = currAction, Size = float.Parse(currSize), AI = sbyte.Parse(currAI) });
                    //amtBefore += float.Parse(currSize);

                    //if (currAI == "1")
                    //{
                    //    actionDict[currPlayer].StreetAI = "T";
                    //    handInfo.StreetAI = "T";
                    //    actionDict[currPlayer].saw_river = true;
                    //    actionDict[currPlayer].saw_showdown = true;
                    //}

                    //if (i == match.Groups["TurnAction_Player"].Captures.Count - 1)
                    //{
                    //    handInfo.RiverPot = amtBefore;
                    //}

                    //if (match.Groups["TurnAction_Player"].Captures.Count > 0 && handInfo.StreetAI != null)
                    //{
                    //    handInfo.StreetAI = "T";
                    //}
                }

                for (int i = 0; i < match.Groups["RiverAction_Player"].Captures.Count; i++)
                {
                    currPlayer = match.Groups["RiverAction_Player"].Captures[i].ToString();
                    currAction = match.Groups["RiverAction_Action"].Captures[i].ToString();
                    currSize = match.Groups["RiverAction_Size"].Captures[i].ToString();
                    currAI = match.Groups["RiverAction_AI"].Captures[i].ToString();

                    actionDict[currPlayer].saw_river = true;

                    //actionDict[currPlayer].ChipsInvested += float.Parse(currSize);
                    actionDict[currPlayer].Actions.River.Add(new Models.Action() { Act = currAction, Size = float.Parse(currSize), AI = sbyte.Parse(currAI) });
                    amtBefore += float.Parse(currSize);

                    if (currAI == "1")
                    {
                        actionDict[currPlayer].StreetAI = "R";
                        //handInfo.StreetAI = "R";
                        actionDict[currPlayer].saw_showdown = true;
                    }

                    //if (match.Groups["RiverAction_Player"].Captures.Count > 0 && handInfo.StreetAI != null)
                    //{
                    //    handInfo.StreetAI = "R";
                    //}
                }

                //@"(?:[\s\r\n]+^\*\*\* SUMMARY \*\*\*)?" +
                //@"(?:[\s\r\n]+^Total pot (?<TotalPot>\d+)(?: Main pot (?<SidePot>\d+)\.)?(?: Side pot(?:[-\d]+)? (?<SidePot>\d+)\.)* \| Rake (?<Rake>\d+))?" +
                //@"(?:[\s\r\n]+^Board .+)?" +
                ////@"(?:[\s\r\n]+^.+: (?<Summary_Player>(?:(?!\((?:button|small blind|big blind)\)).)+)(?: \((?:button|small blind|big blind)\))? (?:showed|mucked)(?: (\[(?<Summary_HC1>[a-zA-Z2-9]+) (?<Summary_HC2>[a-zA-Z2-9]+)\](?:.+)?)))*" +
                //@"(?:[\s\r\n]+^Seat (?:\d+):(?<Summary_Player>(?:(?!\((?:button|small blind|big blind)\)).)+)(?: \((?:button|small blind|big blind)\))? collected \((?<Summary_AmountCollected>\d+)\))*" +
                //@"([\s\r\n]+^.+: (?<Summary_Player>(?:(?!\((?:button|small blind|big blind)\)).)+)(?: \((?:button|small blind|big blind|button\) \(small blind)\))? (?:showed|mucked)(?: (\[(?<Summary_HC1>[a-zA-Z2-9]+) (?<Summary_HC2>[a-zA-Z2-9]+)\]( and won \((?<Summary_AmountCollected>\d+)\))?(?:.+)?)))*";

                //for (int i = 0; i < match.Groups["PlayerCollect"].Captures.Count; i++)
                //{
                //    currPlayer = match.Groups["PlayerCollect"].Captures[i].ToString();

                //    actionDict[currPlayer].ChipsWon = float.Parse(match.Groups["AmountCollect"].Captures[i].ToString());
                //    actionDict[currPlayer].IsWinner = true;
                //}

                for (int i = 0; i < match.Groups["ShowDown_Player"].Captures.Count; i++)
                {
                    currPlayer = match.Groups["ShowDown_Player"].Captures[i].ToString();

                    actionDict[currPlayer].saw_showdown = true;

                }

                //@"(?:[\s\r\n]+^\*\*\* SUMMARY \*\*\*)?" +
                //@"(?:[\s\r\n]+^Total pot (?<TotalPot>\d+)(?: Main pot (?<SidePot>\d+)\.)?(?: Side pot(?:[-\d]+)? (?<SidePot>\d+)\.)* \| Rake (?<Rake>\d+))?" +
                //@"(?:[\s\r\n]+^Board .+)?" +
                //@"(?:[\s\r\n]+^(?<Summary_Player>(.+)): \[(?<Summary_HC1>[a-zA-Z2-9]+) (?<Summary_HC2>[a-zA-Z2-9]+)\] (?<Summary_AmountCollected>-?\d+))*";

                for (int i = 0; i < match.Groups["Summary_Player"].Captures.Count; i++)
                {
                    currPlayer = match.Groups["Summary_Player"].Captures[i].ToString();
                    if (match.Groups["Summary_HC1"].Captures.Count > 0)
                    {
                        actionDict[currPlayer].HC1 = match.Groups["Summary_HC1"].Captures[i].Value.ConvertCardstringToUint();
                        actionDict[currPlayer].HC2 = match.Groups["Summary_HC2"].Captures[i].Value.ConvertCardstringToUint();

                        actionDict[currPlayer].ChipsWon = float.Parse(match.Groups["Summary_AmountCollected"].Captures[i].ToString());
                        if (float.Parse(match.Groups["Summary_AmountCollected"].Captures[i].ToString()) > 0)
                        {
                            actionDict[currPlayer].IsWinner = true;
                        }
                    }
                }

                if (match.Groups["HandId"].Value == "228114188964")
                {
                    int ff = 1;
                }

                allHands.Add(new Hand(handInfo, actionDict));

            }

            watch.Stop();

            Console.WriteLine(allHands.Count());
            Console.WriteLine(watch.ElapsedMilliseconds / 1000.0 + "s");

            if (true)
            {
                int i = 1;
            }

            allHands.CalculateProperties();


            for (int i = 0; i < allHands.Count; i++)
            {
                Console.WriteLine(allHands[i].Info.HandIdBySite + ": ");
                foreach (var sA in allHands[i].SeatActions)
                {
                    Console.WriteLine(sA.Key + ": CEV: " +sA.Value.CevWon + " // AmtWon: " + sA.Value.ChipsWon);
                }
                Console.WriteLine("---");
                
            }
            
            return allHands;
        }